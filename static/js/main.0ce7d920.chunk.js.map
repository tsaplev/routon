{"version":3,"sources":["constants/transport.ts","RouteCalculator.ts","components/Route/routeSlice.ts","components/Route/Map.tsx","components/Route/List.tsx","components/Route/Form.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["transport","plane","label","icon","travelMode","car","bus","train","ship","other","RouteCalculator","from","to","vehicle","path","transportList","Promise","resolve","directionsService","google","maps","DirectionsService","request","origin","destination","TravelMode","route","response","status","console","error","routes","overview_path","linePath","reduce","acc","point","lat","lng","addRoute","createAsyncThunk","a","getPath","routeSlice","createSlice","name","initialState","isLoading","reducers","deleteLastRoute","state","slice","deleteAllRoutes","extraReducers","builder","addCase","pending","fulfilled","payload","push","rejected","actions","selectRoutes","selectRoutesLoadingStatus","Map","useSelector","useState","gmap","setGmap","mapData","setMapData","useEffect","document","getElementById","zoom","center","mapTypeId","disableDefaultUI","zoomControl","forEach","el","setMap","clearRoutes","map","bounds","LatLngBounds","cirlce","SymbolPath","CIRCLE","fillColor","fillOpacity","scale","strokeColor","strokeWeight","index","LatLng","text","String","color","Number","markerFrom","Marker","position","extend","pathLine","Polyline","geodesic","strokeOpacity","markerTo","isEmpty","fitBounds","renderRoutes","className","id","style","height","List","dispatch","useDispatch","Object","assign","background","JSON","stringify","onClick","Form","useForm","mode","shouldFocusError","reValidateMode","register","handleSubmit","watch","setValue","getValues","reset","errors","formState","length","RouteDatePicker","time","setTime","selectedDate","latestDeparture","departure","required","selected","timeInputLabel","dateFormat","showTimeInput","shouldCloseOnSelect","minDate","Date","maxDate","onChange","date","onCalendarClose","withPortal","placeholderText","fromSuggestion","latestEnd","disabled","value","gmaps","location","getFrom","autoComplete","onSubmit","data","nanoid","toISOString","arrival","borderColor","initialValue","onBlur","onSuggestSelect","hidden","entries","key","type","App","store","configureStore","reducer","routeReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0ce7d920.chunk.js","sourcesContent":["import { Transport } from '../app/types';\n\nexport const transport: Transport = {\n  plane: {\n    label: 'Plane',\n    icon: '‚úàÔ∏è',\n    travelMode: 'OTHER',\n  },\n  car: {\n    label: 'Car',\n    icon: 'üöò',\n    travelMode: 'DRIVING',\n  },\n  bus: {\n    label: 'Bus',\n    icon: 'üöç',\n    travelMode: 'DRIVING',\n  },\n  train: {\n    label: 'Train',\n    icon: 'üöÜ',\n    travelMode: 'TRANSIT',\n  },\n  ship: {\n    label: 'Ship',\n    icon: 'üö¢',\n    travelMode: 'OTHER',\n  },\n  other: {\n    label: 'Other',\n    icon: '‚û°',\n    travelMode: 'OTHER',\n  },\n};\n","import { MapPoint, MapPath, Vehicle } from './app/types';\nimport { transport as transportList } from './constants/transport';\n\nclass RouteCalculator {\n  static async getPath(\n    from: MapPoint,\n    to: MapPoint,\n    vehicle: Vehicle\n  ): Promise<MapPath> {\n    const path = [from, to];\n    const { travelMode } = transportList[vehicle];\n\n    if (travelMode === 'OTHER') {\n      return path;\n    }\n\n    return new Promise((resolve) => {\n      const directionsService = new google.maps.DirectionsService();\n      const request = {\n        origin: from,\n        destination: to,\n        travelMode: google.maps.TravelMode[travelMode],\n      };\n\n      directionsService.route(request, (response, status) => {\n        if (status !== 'OK') {\n          console.error('Directions request failed due to:' + status);\n          return resolve(path);\n        }\n\n        if (response?.routes[0]?.overview_path) {\n          const overviewPath = response.routes[0].overview_path;\n          const linePath = overviewPath.reduce((acc: MapPath, point: any) => {\n            return [...acc, { lat: point.lat(), lng: point.lng() }];\n          }, []);\n\n          return resolve(linePath);\n        }\n\n        return resolve(path);\n      });\n    });\n  }\n}\n\nexport default RouteCalculator;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { Route } from '../../app/types';\n\n// import { routes } from '../../constants/routes';\nimport RouteCalculator from '../../RouteCalculator';\n\ninterface RouteState {\n  isLoading: boolean;\n  routes: Route[];\n}\n\nconst initialState: RouteState = {\n  isLoading: false,\n  // routes: routes,\n  routes: [],\n};\n\nexport const addRoute = createAsyncThunk(\n  'route/addRoute',\n  async (route: Route) => {\n    route.path = await RouteCalculator.getPath(\n      route.from,\n      route.to,\n      route.transport\n    );\n\n    return route;\n  }\n);\n\nexport const routeSlice = createSlice({\n  name: 'route',\n  initialState,\n  reducers: {\n    deleteLastRoute: (state) => {\n      state.routes = state.routes.slice(0, -1);\n    },\n    deleteAllRoutes: (state) => {\n      state.routes = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(addRoute.pending, (state) => {\n      state.isLoading = true;\n    });\n\n    builder.addCase(addRoute.fulfilled, (state, { payload }) => {\n      state.routes.push(payload);\n      state.isLoading = false;\n    });\n\n    builder.addCase(addRoute.rejected, (state) => {\n      state.isLoading = false;\n    });\n  },\n});\n\nexport const { deleteLastRoute, deleteAllRoutes } = routeSlice.actions;\n\nexport const selectRoutes = (state: RootState) => state.route.routes;\nexport const selectRoutesLoadingStatus = (state: RootState) =>\n  state.route.isLoading;\n\nexport default routeSlice.reducer;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { GoogleMap, GoogleMapData, Route } from '../../app/types';\nimport { selectRoutes } from './routeSlice';\n\nexport function Map() {\n  const routes = useSelector(selectRoutes);\n  const [gmap, setGmap] = useState<GoogleMap>();\n  const [mapData, setMapData] = useState<GoogleMapData>([]);\n\n  const renderRoutes = (map: GoogleMap, routes: Route[]) => {\n    const bounds = new google.maps.LatLngBounds();\n    const cirlce = {\n      path: google.maps.SymbolPath.CIRCLE,\n      fillColor: 'red',\n      fillOpacity: 1,\n      scale: 10,\n      strokeColor: 'white',\n      strokeWeight: 1,\n    };\n\n    const mapData: GoogleMapData = [];\n    routes.forEach((route, index) => {\n      const from = new google.maps.LatLng(route.path[0].lat, route.path[0].lng);\n      const to = new google.maps.LatLng(route.path[1].lat, route.path[1].lng);\n      const point = {\n        map: map,\n        label: {\n          text: String(index),\n          color: 'white',\n        },\n        icon: cirlce,\n      };\n\n      point.label.text = String(Number(point.label.text) + 1);\n      const markerFrom = new google.maps.Marker({\n        ...point,\n        position: from,\n      });\n      bounds.extend(from);\n      mapData.push(markerFrom);\n\n      const pathLine = new google.maps.Polyline({\n        map: map,\n        path: route.path,\n        geodesic: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 1.0,\n        strokeWeight: 2,\n      });\n      mapData.push(pathLine);\n\n      point.label.text = String(Number(point.label.text) + 1);\n      const markerTo = new google.maps.Marker({\n        ...point,\n        position: to,\n      });\n      bounds.extend(to);\n      mapData.push(markerTo);\n\n      if (!bounds.isEmpty()) {\n        map.fitBounds(bounds);\n      }\n    });\n\n    setMapData(mapData);\n  };\n\n  const clearRoutes = (mapData: GoogleMapData) => {\n    mapData.forEach((el) => {\n      el.setMap(null);\n    });\n  };\n\n  useEffect(() => {\n    setGmap(\n      new google.maps.Map(document.getElementById('map') as HTMLElement, {\n        zoom: 2.3,\n        center: { lat: 50, lng: 80 },\n        mapTypeId: 'terrain',\n        disableDefaultUI: true,\n        zoomControl: true,\n      })\n    );\n  }, []);\n\n  useEffect(() => {\n    if (!gmap) {\n      return;\n    }\n\n    clearRoutes(mapData);\n    renderRoutes(gmap, routes);\n  }, [gmap, routes, mapData]);\n\n  return (\n    <div className=\"dbg-box\">\n      <h2>Map</h2>\n      {/* {routes.map((route) => {\n        return (\n          <pre key={route.id} style={{ whiteSpace: 'pre-wrap' }}>\n            {JSON.stringify(route.path)}\n          </pre>\n        );\n      })} */}\n      <div id=\"map\" style={{ height: '500px' }}></div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Route } from '../../app/types';\nimport { deleteLastRoute, deleteAllRoutes, selectRoutes } from './routeSlice';\n\nexport function List() {\n  const routes = useSelector(selectRoutes);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"table dbg-box\">\n      <h2>List</h2>\n      {routes.map((el: Route) => {\n        const route = Object.assign({}, el);\n        delete route.path;\n        // route.from = el.from.name,\n        // route.to = el.to.name,\n        // route.by = el.transport,\n\n        return (\n          <pre key={route.id} style={{ background: 'lightgray' }}>\n            <p>{JSON.stringify(route, null, 2)}</p>\n          </pre>\n        );\n      })}\n      <button onClick={() => dispatch(deleteLastRoute())}>Delete</button>\n      <button onClick={() => dispatch(deleteAllRoutes())}>Delete all</button>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addRoute, selectRoutesLoadingStatus } from './routeSlice';\nimport { nanoid } from 'nanoid';\nimport Geosuggest from 'react-geosuggest';\nimport DatePicker from 'react-datepicker';\nimport { useForm } from 'react-hook-form';\nimport { selectRoutes } from './routeSlice';\nimport { transport } from '../../constants/transport';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport '../LocationInput/index.css';\n\nexport function Form() {\n  const isLoading = useSelector(selectRoutesLoadingStatus);\n  const routes = useSelector(selectRoutes);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onSubmit',\n    shouldFocusError: false,\n    reValidateMode: 'onBlur',\n  });\n\n  useEffect(() => {\n    if (routes.length === 0) {\n      reset();\n    }\n  }, [routes, reset]);\n\n  const RouteDatePicker = ({ label }: { label: string }) => {\n    const [time, setTime] = useState();\n    const selectedDate = watch(label, null);\n    const latestDeparture = routes[routes.length - 1]?.departure;\n\n    const getMinDate = () => {\n      if (label === 'departure') {\n        return latestDeparture ? new Date(latestDeparture) : null;\n      }\n\n      if (label === 'arrival') {\n        return getValues('departure');\n      }\n    };\n\n    const getMaxDate = () => {\n      if (label === 'departure') {\n        return getValues('arrival');\n      }\n\n      if (label === 'arrival') {\n        return null;\n      }\n    };\n\n    return (\n      <DatePicker\n        {...register(label, { required: true })}\n        selected={time ? time : selectedDate}\n        timeInputLabel=\"Time:\"\n        dateFormat=\"MMMM d, HH:mm\"\n        showTimeInput\n        shouldCloseOnSelect={false}\n        minDate={getMinDate()}\n        maxDate={getMaxDate()}\n        onChange={(date: any) => {\n          setTime(date);\n        }}\n        onCalendarClose={() => {\n          setValue(label, time);\n        }}\n        withPortal\n        placeholderText={label}\n      />\n    );\n  };\n\n  const onSubmit = (data: any) => {\n    dispatch(\n      addRoute({\n        id: nanoid(),\n        departure: data.departure.toISOString(),\n        arrival: data.arrival.toISOString(),\n        from: {\n          name: data.from.gmaps?.name,\n          lat: data.from.location?.lat,\n          lng: data.from.location?.lng,\n        },\n        to: {\n          name: data.to.gmaps?.name,\n          lat: data.to.location?.lat,\n          lng: data.to.location?.lng,\n        },\n        transport: data.transport,\n        path: [],\n      })\n    );\n\n    reset();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"dbg-box\">\n        <h2>Form</h2>\n        <h2>Calculating shortest path...</h2>\n      </div>\n    );\n  }\n\n  const getFrom = () => {\n    const latestEnd = routes[routes.length - 1]?.to;\n\n    if (latestEnd) {\n      return {\n        disabled: true,\n        value: {\n          gmaps: { name: latestEnd.name },\n          location: {\n            lat: latestEnd.lat,\n            lng: latestEnd.lng,\n          },\n        },\n      };\n    }\n\n    return {\n      disabled: false,\n      value: null,\n    };\n  };\n\n  // const getClosestPossibleDepartureDate = () => {\n  //   const latestDeparture = routes[routes.length - 1].departure;\n  // };\n\n  const fromSuggestion = getFrom();\n\n  return (\n    <div className=\"dbg-box\">\n      <h2>Form</h2>\n      <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n        {/* From */}\n        <div\n          className=\"dbg-box__input\"\n          style={{ borderColor: errors.from ? 'red' : 'transparent' }}\n        >\n          <Geosuggest\n            {...register('from', {\n              required: true,\n              value: getValues('from')\n                ? getValues('from')\n                : fromSuggestion.value,\n            })}\n            initialValue={fromSuggestion.value?.gmaps.name}\n            disabled={fromSuggestion.disabled}\n            onChange={() => {}}\n            onBlur={() => {}}\n            onSuggestSelect={(data) => {\n              setValue('from', data);\n            }}\n            autoComplete=\"off\"\n          />\n        </div>\n\n        <div\n          className=\"dbg-box__input\"\n          style={{ borderColor: errors.departure ? 'red' : 'transparent' }}\n        >\n          <RouteDatePicker label=\"departure\" />\n        </div>\n\n        {/* Transport */}\n        <div\n          className=\"dbg-box__input\"\n          style={{ borderColor: errors.transport ? 'red' : 'transparent' }}\n        >\n          <select\n            {...register('transport', { required: true })}\n            name=\"transport\"\n          >\n            <option hidden label=\" -- \" />\n            {Object.entries(transport).map(([key, value]) => (\n              <option key={key} value={key}>\n                {value.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* To */}\n        <div\n          className=\"dbg-box__input\"\n          style={{ borderColor: errors.to ? 'red' : 'transparent' }}\n        >\n          <Geosuggest\n            {...register('to', { required: true })}\n            onChange={() => {}}\n            onBlur={() => {}}\n            onSuggestSelect={(data: any) => {\n              setValue('to', data);\n            }}\n            autoComplete=\"off\"\n          />\n        </div>\n\n        <div\n          className=\"dbg-box__input\"\n          style={{ borderColor: errors.arrival ? 'red' : 'transparent' }}\n        >\n          <RouteDatePicker label=\"arrival\" />\n        </div>\n\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport './App.css';\r\nimport { Map } from './components/Route/Map';\r\nimport { List } from './components/Route/List';\r\nimport { Form } from './components/Route/Form';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"layout\">\r\n      <Map />\r\n      <List />\r\n      <Form />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport routeReducer from '../components/Route/routeSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    route: routeReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}