{"version":3,"sources":["constants/transport.ts","RouteCalculator.ts","components/Route/routeSlice.ts","constants/routes.ts","components/Route/Map.tsx","components/Route/List.tsx","components/Route/Form.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["transport","plane","label","icon","travelMode","car","bus","train","ship","other","RouteCalculator","from","to","vehicle","path","transportList","Promise","resolve","reject","directionsService","google","maps","DirectionsService","request","origin","destination","TravelMode","route","response","status","console","error","routes","overview_path","linePath","reduce","acc","point","lat","lng","initialState","isLoading","id","departure","arrival","name","addRoute","createAsyncThunk","a","getPath","log","routeSlice","createSlice","reducers","deleteLastRoute","state","slice","deleteAllRoutes","extraReducers","builder","addCase","pending","fulfilled","payload","push","rejected","actions","selectRoutes","selectRoutesLoadingStatus","Map","useSelector","useEffect","map","document","getElementById","zoom","center","mapTypeId","disableDefaultUI","zoomControl","renderRoutes","bounds","LatLngBounds","cirlce","SymbolPath","CIRCLE","fillColor","fillOpacity","scale","strokeColor","strokeWeight","forEach","index","LatLng","text","String","color","Marker","position","extend","Polyline","geodesic","strokeOpacity","isEmpty","fitBounds","className","style","height","List","dispatch","useDispatch","el","by","background","JSON","stringify","onClick","Form","useForm","mode","shouldFocusError","reValidateMode","register","handleSubmit","setValue","reset","errors","formState","fromSuggestion","latestEnd","length","required","value","gmaps","location","getFrom","autoComplete","onSubmit","data","nanoid","initialValue","disabled","onChange","onBlur","onSuggestSelect","borderColor","hidden","Object","entries","key","type","App","store","configureStore","reducer","routeReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b099868b.chunk.js","sourcesContent":["import { Transport } from '../app/types';\n\nexport const transport: Transport = {\n  plane: {\n    label: 'Plane',\n    icon: '‚úàÔ∏è',\n    travelMode: 'OTHER',\n  },\n  car: {\n    label: 'Car',\n    icon: 'üöò',\n    travelMode: 'DRIVING',\n  },\n  bus: {\n    label: 'Bus',\n    icon: 'üöç',\n    travelMode: 'DRIVING',\n  },\n  train: {\n    label: 'Train',\n    icon: 'üöÜ',\n    travelMode: 'TRANSIT',\n  },\n  ship: {\n    label: 'Ship',\n    icon: 'üö¢',\n    travelMode: 'OTHER',\n  },\n  other: {\n    label: 'Other',\n    icon: '‚û°',\n    travelMode: 'OTHER',\n  },\n};\n","import { MapPoint, MapPath, Vehicle } from './app/types';\nimport { transport as transportList } from './constants/transport';\n\nclass RouteCalculator {\n  static async getPath(\n    from: MapPoint,\n    to: MapPoint,\n    vehicle: Vehicle\n  ): Promise<MapPath> {\n    const path = [from, to];\n    const { travelMode } = transportList[vehicle];\n\n    if (travelMode === 'OTHER') {\n      return path;\n    }\n\n    return new Promise((resolve, reject) => {\n      const directionsService = new google.maps.DirectionsService();\n      const request = {\n        origin: from,\n        destination: to,\n        travelMode: google.maps.TravelMode[travelMode],\n      };\n\n      directionsService.route(request, (response, status) => {\n        if (status !== 'OK') {\n          console.error('Directions request failed due to:' + status);\n          return reject(path);\n        }\n\n        if (response?.routes[0]?.overview_path) {\n          const overviewPath = response.routes[0].overview_path;\n          const linePath = overviewPath.reduce((acc: MapPath, point: any) => {\n            return [...acc, { lat: point.lat(), lng: point.lng() }];\n          }, []);\n\n          return resolve(linePath);\n        }\n\n        return path;\n      });\n    });\n  }\n}\n\nexport default RouteCalculator;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { Route } from '../../app/types';\n\nimport { routes } from '../../constants/routes';\nimport RouteCalculator from '../../RouteCalculator';\n\ninterface RouteState {\n  isLoading: boolean;\n  routes: Route[];\n}\n\nconst initialState: RouteState = {\n  isLoading: false,\n  routes: routes,\n};\n\nexport const addRoute = createAsyncThunk(\n  'route/addRoute',\n  async (route: Route) => {\n    route.path = await RouteCalculator.getPath(\n      route.from,\n      route.to,\n      route.transport\n    );\n    // route.path = [\n    //   { lat: 55.7558, lng: 37.6173 },\n    //   { lat: 25.2048, lng: 55.2708 },\n    // ];\n\n    console.log('Route', route);\n\n    return route;\n  }\n);\n\nexport const routeSlice = createSlice({\n  name: 'route',\n  initialState,\n  reducers: {\n    deleteLastRoute: (state) => {\n      state.routes = state.routes.slice(0, -1);\n    },\n    deleteAllRoutes: (state) => {\n      state.routes = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(addRoute.pending, (state) => {\n      state.isLoading = true;\n    });\n\n    builder.addCase(addRoute.fulfilled, (state, { payload }) => {\n      state.routes.push(payload);\n      state.isLoading = false;\n    });\n\n    builder.addCase(addRoute.rejected, (state) => {\n      state.isLoading = false;\n    });\n  },\n});\n\nexport const { deleteLastRoute, deleteAllRoutes } = routeSlice.actions;\n\nexport const selectRoutes = (state: RootState) => state.route.routes;\nexport const selectRoutesLoadingStatus = (state: RootState) =>\n  state.route.isLoading;\n\nexport default routeSlice.reducer;\n","import { Route } from '../app/types';\n\nconst routes: Route[] = [\n  {\n    id: 'nYw34AOsYpJG5BXHfXQzx',\n    departure: '2019-10-16 01:10:00',\n    arrival: '2019-10-16 07:30:00',\n    from: {\n      name: 'Moscow',\n      lat: 55.7558,\n      lng: 37.6173,\n    },\n    to: {\n      name: 'Dubai',\n      lat: 25.2048,\n      lng: 55.2708,\n    },\n    transport: 'plane',\n    path: [\n      { lat: 55.7558, lng: 37.6173 },\n      { lat: 25.2048, lng: 55.2708 },\n    ],\n  },\n  {\n    id: 'Sy0BEfPNO3EiyUuzc2x6U',\n    departure: '2019-10-16 01:10:00',\n    arrival: '2019-10-16 07:30:00',\n    from: {\n      name: 'Dubai',\n      lat: 55.7558,\n      lng: 37.6173,\n    },\n    to: {\n      name: 'Manila',\n      lat: 14.5995,\n      lng: 120.9842,\n    },\n    transport: 'plane',\n    path: [\n      { lat: 25.2048, lng: 55.2708 },\n      { lat: 14.5995, lng: 120.9842 },\n    ],\n  },\n];\n\nexport { routes };\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Route } from '../../app/types';\nimport { selectRoutes } from './routeSlice';\n\nexport function Map() {\n  const routes = useSelector(selectRoutes);\n\n  useEffect(() => {\n    console.log('Component did mount');\n    const map = new google.maps.Map(\n      document.getElementById('map') as HTMLElement,\n      {\n        zoom: 2.3,\n        center: { lat: 50, lng: 80 },\n        mapTypeId: 'terrain',\n        disableDefaultUI: true,\n        zoomControl: true,\n      }\n    );\n\n    renderRoutes(map, routes);\n  }, [routes]);\n\n  const renderRoutes = (map: any, routes: Route[]) => {\n    const bounds = new google.maps.LatLngBounds();\n    const cirlce = {\n      path: google.maps.SymbolPath.CIRCLE,\n      fillColor: 'red',\n      fillOpacity: 1,\n      scale: 10,\n      strokeColor: 'white',\n      strokeWeight: 1,\n    };\n\n    routes.forEach((route, index) => {\n      const from = new google.maps.LatLng(route.path[0].lat, route.path[0].lng);\n      const to = new google.maps.LatLng(route.path[1].lat, route.path[1].lng);\n      const point = {\n        map: map,\n        label: {\n          text: String(index + 1),\n          color: 'white',\n        },\n        icon: cirlce,\n      };\n\n      new google.maps.Marker({\n        ...point,\n        position: from,\n      });\n      bounds.extend(from);\n\n      new google.maps.Polyline({\n        map: map,\n        path: route.path,\n        geodesic: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 1.0,\n        strokeWeight: 2,\n      });\n\n      new google.maps.Marker({\n        ...point,\n        // label: null,\n        position: to,\n      });\n      bounds.extend(to);\n\n      if (!bounds.isEmpty()) {\n        map.fitBounds(bounds);\n      }\n    });\n  };\n\n  return (\n    <div className=\"dbg-box\">\n      <h2>Map</h2>\n      {/* {routes.map((route) => {\n        return (\n          <pre key={route.id} style={{ whiteSpace: 'pre-wrap' }}>\n            {JSON.stringify(route.path)}\n          </pre>\n        );\n      })} */}\n      <div id=\"map\" style={{ height: '500px' }}></div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteLastRoute, deleteAllRoutes, selectRoutes } from './routeSlice';\n\nexport function List() {\n  const routes = useSelector(selectRoutes);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"table dbg-box\">\n      <h2>List</h2>\n      {routes.map((el: any) => {\n        const route = {\n          id: el.id,\n          from: el.from.name,\n          to: el.to.name,\n          by: el.transport,\n        };\n\n        return (\n          <pre key={route.id} style={{ background: 'lightgray' }}>\n            <p>{JSON.stringify(route, null, 2)}</p>\n          </pre>\n        );\n      })}\n      <button onClick={() => dispatch(deleteLastRoute())}>Delete</button>\n      <button onClick={() => dispatch(deleteAllRoutes())}>Delete all</button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addRoute, selectRoutesLoadingStatus } from './routeSlice';\nimport { nanoid } from 'nanoid';\nimport Geosuggest from 'react-geosuggest';\nimport { useForm } from 'react-hook-form';\nimport { selectRoutes } from './routeSlice';\nimport { transport } from '../../constants/transport';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport '../LocationInput/index.css';\n\nexport function Form() {\n  const isLoading = useSelector(selectRoutesLoadingStatus);\n  const routes = useSelector(selectRoutes);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onSubmit',\n    shouldFocusError: false,\n    reValidateMode: 'onBlur',\n  });\n\n  const onSubmit = (data: any) => {\n    dispatch(\n      addRoute({\n        id: nanoid(),\n        // departure: data.departure.toISOString(),\n        // arrival: data.arrival.toISOString(),\n        departure: '2019-02-03 14:05',\n        arrival: '2019-02-04 01:23',\n        from: {\n          name: data.from.gmaps?.name,\n          lat: data.from.location?.lat,\n          lng: data.from.location?.lng,\n        },\n        to: {\n          name: data.to.gmaps?.name,\n          lat: data.to.location?.lat,\n          lng: data.to.location?.lng,\n        },\n        transport: data.transport,\n        path: [],\n      })\n    );\n\n    reset();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"dbg-box\">\n        <h2>Form</h2>\n        <h2>Calculating shortest path...</h2>\n      </div>\n    );\n  }\n\n  const getFrom = () => {\n    const latestEnd = routes[routes.length - 1]?.to;\n\n    if (latestEnd) {\n      return {\n        required: !(latestEnd.name.length > 0),\n        value: {\n          gmaps: { name: latestEnd.name },\n          location: {\n            lat: latestEnd.lat,\n            lng: latestEnd.lng,\n          },\n        },\n      };\n    }\n\n    return {\n      required: true,\n      value: null,\n    };\n  };\n\n  const fromSuggestion = getFrom();\n\n  return (\n    <div className=\"dbg-box\">\n      <h2>Form</h2>\n      <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n        {/* From */}\n        <div className=\"dbg-box__input\">\n          <Geosuggest\n            {...register('from', {\n              required: fromSuggestion.required,\n              value: fromSuggestion.value,\n            })}\n            initialValue={fromSuggestion.value?.gmaps.name}\n            disabled={!fromSuggestion.required}\n            onChange={() => {}}\n            onBlur={() => {}}\n            onSuggestSelect={(data) => {\n              setValue('from', data);\n            }}\n            autoComplete=\"off\"\n          />\n          {errors.from && (\n            <span style={{ color: 'red' }}> This field is required</span>\n          )}\n        </div>\n\n        {/* Departure */}\n        {/* <div className=\"dbg-box__input\">\n          <RouteDatePicker label=\"departure\" />\n          {errors.departure && (\n            <span style={{ color: 'red' }}> This field is required</span>\n          )}\n        </div> */}\n\n        {/* Transport */}\n        <div\n          className=\"dbg-box__input\"\n          style={{ borderColor: errors.transport ? 'red' : 'transparent' }}\n        >\n          <select\n            {...register('transport', { required: true })}\n            name=\"transport\"\n          >\n            <option hidden label=\" -- \" />\n            {Object.entries(transport).map(([key, value]) => (\n              <option key={key} value={key}>\n                {value.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Arrival */}\n        {/* <div className=\"dbg-box__input\">\n          <RouteDatePicker label=\"arrival\" />\n          {errors.arrival && (\n            <span style={{ color: 'red' }}> This field is required</span>\n          )}\n        </div> */}\n\n        {/* To */}\n        <div\n          className=\"dbg-box__input\"\n          style={{ borderColor: errors.to ? 'red' : 'transparent' }}\n        >\n          <Geosuggest\n            {...register('to', { required: true })}\n            onChange={() => {}}\n            onBlur={() => {}}\n            onSuggestSelect={(data: any) => {\n              setValue('to', data);\n            }}\n            autoComplete=\"off\"\n          />\n        </div>\n\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport './App.css';\r\nimport { Map } from './components/Route/Map';\r\nimport { List } from './components/Route/List';\r\nimport { Form } from './components/Route/Form';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"layout\">\r\n      <Map />\r\n      <Form />\r\n      <List />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport routeReducer from '../components/Route/routeSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    route: routeReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}